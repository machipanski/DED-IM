import numpy as np

a = np.array(([-1, 1, -1], [-1, 1, -1], [-1, -1, -1]), dtype="int")
b = np.array(([-1, -1, 1], [-1, 1, -1], [-1, -1, -1]), dtype="int")
c = np.array(([-1, -1, -1], [-1, 1, 1], [-1, -1, -1]), dtype="int")
d = np.array(([-1, -1, -1], [-1, 1, -1], [-1, -1, 1]), dtype="int")
e = np.array(([-1, -1, -1], [-1, 1, -1], [-1, 1, -1]), dtype="int")
f = np.array(([-1, -1, -1], [-1, 1, -1], [1, -1, -1]), dtype="int")
g = np.array(([-1, -1, -1], [1, 1, -1], [-1, -1, -1]), dtype="int")
h = np.array(([1, -1, -1], [-1, 1, -1], [-1, -1, -1]), dtype="int")
PONTAS_SOLTAS = [a, b, c, d, e, f, g, h]

a = np.array(([-1, 1, -1], [-1, 1, -1], [-1, 1, -1]), dtype="int")
b = np.array(([-1, -1, -1], [1, 1, 1], [-1, -1, -1]), dtype="int")
c = np.array(([1, -1, -1], [-1, 1, -1], [-1, -1, 1]), dtype="int")
d = np.array(([-1, -1, 1], [-1, 1, -1], [1, -1, -1]), dtype="int")
e = np.array(([1, -1, 1], [-1, 1, -1], [-1, -1, -1]), dtype="int")
f = np.array(([-1, -1, 1], [-1, 1, -1], [-1, -1, 1]), dtype="int")
g = np.array(([-1, -1, -1], [-1, 1, -1], [1, -1, 1]), dtype="int")
h = np.array(([1, -1, -1], [-1, 1, -1], [1, -1, -1]), dtype="int")
i = np.array(([1, -1, -1], [-1, 1, -1], [-1, 1, -1]), dtype="int")
j = np.array(([-1, -1, 1], [-1, 1, -1], [-1, 1, -1]), dtype="int")
k = np.array(([-1, 1, -1], [-1, 1, -1], [1, -1, -1]), dtype="int")
m = np.array(([-1, 1, -1], [-1, 1, -1], [-1, -1, 1]), dtype="int")
n = np.array(([1, -1, -1], [-1, 1, 1], [-1, -1, -1]), dtype="int")
o = np.array(([-1, -1, -1], [-1, 1, 1], [1, -1, -1]), dtype="int")
p = np.array(([-1, -1, 1], [1, 1, -1], [-1, -1, -1]), dtype="int")
q = np.array(([-1, -1, -1], [1, 1, -1], [-1, -1, 1]), dtype="int")
MEIO_DO_CAMINHO = [a, b, c, d, e, f, g, h, i, j, k, m, n, o, p, q]

a = np.array(([1, -1, 1], [-1, 1, -1], [-1, 1, -1]), dtype="int")
b = np.array(([-1, 1, -1], [-1, 1, -1], [1, -1, 1]), dtype="int")
c = np.array(([1, -1, -1], [-1, 1, 1], [1, -1, -1]), dtype="int")
d = np.array(([-1, -1, 1], [1, 1, -1], [-1, -1, 1]), dtype="int")
e = np.array(([-1, 1, -1], [1, 1, -1], [-1, 1, -1]), dtype="int")
f = np.array(([-1, 1, -1], [1, 1, 1], [-1, -1, -1]), dtype="int")
g = np.array(([-1, 1, -1], [-1, 1, 1], [-1, 1, -1]), dtype="int")
h = np.array(([-1, -1, -1], [1, 1, 1], [-1, 1, -1]), dtype="int")
i = np.array(([-1, 1, -1], [1, 1, -1], [-1, -1, 1]), dtype="int")
j = np.array(([-1, 1, -1], [-1, 1, 1], [1, -1, -1]), dtype="int")
k = np.array(([1, -1, -1], [-1, 1, 1], [-1, 1, -1]), dtype="int")
l = np.array(([-1, -1, 1], [1, 1, -1], [-1, 1, -1]), dtype="int")
m = np.array(([-1, -1, 1], [-1, 1, -1], [1, -1, 1]), dtype="int")
n = np.array(([1, -1, -1], [-1, 1, -1], [1, -1, 1]), dtype="int")
o = np.array(([1, -1, 1], [-1, 1, -1], [-1, -1, 1]), dtype="int")
p = np.array(([1, -1, 1], [-1, 1, -1], [1, -1, -1]), dtype="int")
q = np.array(([1, 1, -1], [-1, 1, -1], [-1, 1, -1]), dtype="int")
r = np.array(([-1, 1, -1], [-1, 1, -1], [1, 1, -1]), dtype="int")
s = np.array(([-1, 1, 1], [-1, 1, -1], [-1, 1, -1]), dtype="int")
t = np.array(([-1, 1, -1], [-1, 1, -1], [-1, 1, 1]), dtype="int")
u = np.array(([1, -1, -1], [1, 1, 1], [-1, -1, -1]), dtype="int")
v = np.array(([-1, -1, 1], [1, 1, 1], [-1, -1, -1]), dtype="int")
w = np.array(([-1, -1, -1], [1, 1, 1], [1, -1, -1]), dtype="int")
x = np.array(([-1, -1, -1], [1, 1, 1], [-1, -1, 1]), dtype="int")
INTERSECCOES = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, x]

a = np.array(([1, 0, 1], [0, 1, 0], [1, 0, 1]), dtype="int")
b = np.array(([0, 1, 0], [1, 1, 1], [0, 1, 0]), dtype="int")
CORROMPIDO = [a, b]

a = np.array(([-1, 1, -1], [-1, -1, -1], [-1, 1, -1]), dtype="int")
b = np.array(([-1, -1, -1], [1, -1, 1], [-1, -1, -1]), dtype="int")
c = np.array(([1, -1, -1], [-1, -1, -1], [-1, -1, 1]), dtype="int")
d = np.array(([-1, -1, 1], [-1, -1, -1], [1, -1, 1]), dtype="int")
# e = np.array(([1, -1, 1], [-1, -1, -1], [-1, -1, -1]), dtype="int")
# f = np.array(([-1, -1, 1], [-1, -1, -1], [-1, -1, 1]), dtype="int")
# g = np.array(([-1, -1, -1], [-1, -1, -1], [1, -1, 1]), dtype="int")
# h = np.array(([1, -1, -1], [-1, -1, -1], [1, -1, -1]), dtype="int")
# CORTADO = [a, b, c, d, e, f, g, h]
CORTADO = [a, b, c, d]

a = np.array(([1, -1, 1], [-1, -1, -1], [-1, -1, -1]), dtype="int")
b = np.array(([1, -1, -1], [-1, -1, 1], [-1, -1, -1]), dtype="int")
c = np.array(([1, -1, -1], [-1, -1, -1], [-1, -1, 1]), dtype="int")
d = np.array(([1, -1, -1], [-1, -1, -1], [-1, 1, -1]), dtype="int")
e = np.array(([1, -1, -1], [-1, -1, -1], [1, -1, -1]), dtype="int")
# f = np.array(([-1, 1, -1], [-1, -1, 1], [-1, -1, -1]), dtype="int")
g = np.array(([-1, 1, -1], [-1, -1, -1], [-1, -1, 1]), dtype="int")
h = np.array(([-1, 1, -1], [-1, -1, -1], [-1, 1, -1]), dtype="int")
i = np.array(([-1, 1, -1], [-1, -1, -1], [1, -1, -1]), dtype="int")
j = np.array(([-1, -1, 1], [-1, -1, -1], [-1, -1, 1]), dtype="int")
k = np.array(([-1, -1, 1], [-1, -1, -1], [-1, 1, -1]), dtype="int")
l = np.array(([-1, -1, 1], [-1, -1, -1], [1, -1, -1]), dtype="int")
m = np.array(([-1, -1, 1], [1, -1, -1], [-1, -1, -1]), dtype="int")
n = np.array(([-1, -1, -1], [-1, -1, 1], [1, -1, -1]), dtype="int")
o = np.array(([-1, -1, -1], [-1, -1, 1], [1, -1, -1]), dtype="int")
p = np.array(([-1, -1, -1], [1, -1, 1], [-1, -1, -1]), dtype="int")
q = np.array(([-1, -1, -1], [-1, -1, -1], [1, -1, 1]), dtype="int")
r = np.array(([-1, -1, -1], [1, -1, -1], [-1, -1, 1]), dtype="int")
INTERROMPIDO = [a, b, c, d, e, g, h, i, j, k, l, m, n, o, p, q, r]

a = np.array(([-1, 1, 1], [-1, 1, -1], [-1, -1, -1]), dtype="int")
b = np.array(([-1, -1, -1], [-1, 1, -1], [-1, 1, 1]), dtype="int")
c = np.array(([-1, -1, -1], [-1, 1, -1], [1, 1, -1]), dtype="int")
d = np.array(([1, 1, -1], [-1, 1, -1], [-1, -1, -1]), dtype="int")
e = np.array(([1, -1, 1], [1, 1, -1], [-1, -1, -1]), dtype="int")
f = np.array(([-1, -1, 1], [-1, 1, 1], [-1, -1, -1]), dtype="int")
g = np.array(([-1, -1, -1], [-1, 1, 1], [-1, -1, 1]), dtype="int")
h = np.array(([-1, -1, -1], [1, 1, -1], [1, -1, -1]), dtype="int")
EXCESSIVE_DIAGONALS = [a, b, c, d, e, f, g, h]

a = np.array(([-1, 1, -1], [1, -1, 1], [-1, 1, -1]), dtype="int")
b = np.array(([1, -1, 1], [-1, -1, -1], [1, -1, 1]), dtype="int")
CROSSES = [a, b]